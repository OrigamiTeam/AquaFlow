#include <Arduino.h>
#include "displayST7565R.h"

#define SI 15 // Serial data signal
#define SC 16 // Serial clock signal
#define RS 17 // Register select signal
#define RES 18 // Reset signal
#define CS 19  // Chip select signal

const unsigned char numeros [10][56] PROGMEM = {
  {0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F},
  {0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xF8, 0xF8, 0xF8, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E},
  {0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F},
  {0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F},
  {0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F},
  {0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F},
  {0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xF8, 0xF8, 0xF8, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F},
  {0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F},
  {0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F}
};

const unsigned char simbolos [2][60] PROGMEM = {
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x66, 0x66, 0x7F, 0x7F, 0xFE, 0xFE, 0x06, 0x06, 0x06, 0xFE, 0xFE, 0x06, 0x06, 0x06, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00}
};

displayST7565R LCD;

void setup() {
  LCD.begin(SI, SC, RS, RES, CS);
  delay(100);
  LCD.clear(0, 128);
  delay(100);
}

void loop() {
  unsigned char _char [60] = {};

  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[0][i]));
  }
  LCD.write(_char, 0, 14);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[1][i]));
  }
  LCD.write(_char, 18, 14);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[2][i]));
  }
  LCD.write(_char, 36, 14);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[3][i]));
  }
  LCD.write(_char, 54, 14);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[4][i]));
  }
  LCD.write(_char, 72, 14);
  
  for (uint8_t i = 0; i < 8; i++) {
    _char[i] = pgm_read_byte(&(simbolos[0][i]));
  }
  LCD.write(_char, 89, 2);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[5][i]));
  }
  LCD.write(_char, 94, 14);
  
  for (uint8_t i = 0; i < 60; i++) {
    _char[i] = pgm_read_byte(&(simbolos[1][i]));
  }
  LCD.write(_char, 113, 15);

  delay(5000);
  LCD.clear(0, 128);
  delay(1);

  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[4][i]));
  }
  LCD.write(_char, 0, 14);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[5][i]));
  }
  LCD.write(_char, 18, 14);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[6][i]));
  }
  LCD.write(_char, 36, 14);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[7][i]));
  }
  LCD.write(_char, 54, 14);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[8][i]));
  }
  LCD.write(_char, 72, 14);
  
  for (uint8_t i = 0; i < 8; i++) {
    _char[i] = pgm_read_byte(&(simbolos[0][i]));
  }
  LCD.write(_char, 89, 2);
  
  for (uint8_t i = 0; i < 56; i++) {
    _char[i] = pgm_read_byte(&(numeros[9][i]));
  }
  LCD.write(_char, 94, 14);
  
  for (uint8_t i = 0; i < 60; i++) {
    _char[i] = pgm_read_byte(&(simbolos[1][i]));
  }
  LCD.write(_char, 113, 15);

  delay(5000);
  LCD.clear(0, 128);
  delay(1);
}